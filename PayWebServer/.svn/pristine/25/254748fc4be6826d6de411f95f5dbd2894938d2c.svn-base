package com.huateng.pay.handler.netty;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.huateng.pay.handler.pool.ThreadPool;
import com.huateng.pay.handler.services.QRCodeSocketManager;
import com.huateng.pay.services.alipay.AliPayMerchantSynchService;
import com.huateng.pay.services.alipay.AliPayPayService;
import com.huateng.pay.services.cups.ICupsPayService;
import com.huateng.pay.services.db.ITimingTaskService;
import com.huateng.pay.services.local.ILocalBankService;
import com.huateng.pay.services.statics.IStaticQRCodeService;
import com.huateng.pay.services.statics.IThreeCodeStaticQRCodeService;
import com.huateng.pay.services.threecode.IThreeCodeService;
import com.huateng.pay.services.weixin.WxMerchantSynchService;
import com.huateng.pay.services.weixin.WxPayService;

import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;

public class NettyServerHandler extends SimpleChannelInboundHandler<String>{
	private static Logger logger = LoggerFactory.getLogger(NettyServerHandler.class);
	private WxPayService wxPayService;
    private ITimingTaskService timingTaskService;
	private ILocalBankService localBankService; 
	private WxMerchantSynchService wxMerchantSynchService;
	private ThreadPool QRCodePool;
	private AliPayMerchantSynchService aliPayMerchantSynchService;
	private IStaticQRCodeService  staticQRCodeService;
	private AliPayPayService aliPayPayService;
	private IThreeCodeStaticQRCodeService threeCodeStaticQRCodeService;
	private IThreeCodeService  threeCodeService;
	private ICupsPayService cupsPayService;
	
	public NettyServerHandler(WxPayService wxPayService,
			ILocalBankService localBankService,
			WxMerchantSynchService wxMerchantSynchService,
			ITimingTaskService timingTaskService,
			AliPayMerchantSynchService aliPayMerchantSynchService,
			IStaticQRCodeService  staticQRCodeService,
			ThreadPool QRCodePool,
			IThreeCodeStaticQRCodeService threeCodeStaticQRCodeService,
			AliPayPayService aliPayPayService,
			IThreeCodeService threeCodeService,
			ICupsPayService cupsPayService){
		this.wxPayService = wxPayService;
		this.localBankService = localBankService;
		this.timingTaskService = timingTaskService;
		this.wxMerchantSynchService = wxMerchantSynchService;	
		this.QRCodePool = QRCodePool;
		this.aliPayMerchantSynchService = aliPayMerchantSynchService;
		this.staticQRCodeService = staticQRCodeService;
		this.aliPayPayService = aliPayPayService;
		this.threeCodeStaticQRCodeService = threeCodeStaticQRCodeService;
		this.threeCodeService = threeCodeService;
		this.cupsPayService = cupsPayService;
	}
	@Override
	protected void channelRead0(ChannelHandlerContext ctx, String reviceMsg)
			throws Exception {
		
		logger.info("收到的信息:" + reviceMsg);
		QRCodePool.execute(new QRCodeSocketManager(ctx,reviceMsg,wxPayService,localBankService,wxMerchantSynchService,timingTaskService,aliPayMerchantSynchService,aliPayPayService,staticQRCodeService,threeCodeStaticQRCodeService,threeCodeService,cupsPayService));
	}

	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)throws Exception {	
		
		logger.error("channel出现异常情况" + cause.getMessage());

		Channel channel =  ctx.channel();
		if(!channel.isActive()){
			logger.info("关闭channel");
			channel.close();
			ctx.close();
		}
	}
	
	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		ctx.flush();
	}
	    
}
